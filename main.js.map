{"version":3,"file":"main.js","mappings":"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","sources":["webpack://mesto-project-ff/webpack/bootstrap","webpack://mesto-project-ff/webpack/runtime/publicPath","webpack://mesto-project-ff/./src/scripts/constants.ts","webpack://mesto-project-ff/./src/scripts/index.ts","webpack://mesto-project-ff/./src/scripts/game.ts"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","__webpack_require__.p = \"\";","import { Gesture } from \"./type\";\n\nconst gestureArray: Gesture[] = ['paper', 'rock', 'scissors'];\nconst delayIconAnimation = 150;\n\n\nexport {gestureArray, delayIconAnimation};\n","import \"../pages/index.scss\";\nimport { Gesture } from \"./type\";\nimport { getPlayerGesture, getBotGesture, compareGestures } from \"./game\";\nimport { delayIconAnimation, gestureArray } from \"./constants\";\nimport paper from \"../images/paper.svg\";\nimport rock from \"../images/rock.svg\";\nimport scissors from \"../images/scissors.svg\";\n\nconst startContainer = document.querySelector<HTMLDivElement>(\".start-screen\")!;\nconst board = document.querySelector<HTMLDivElement>(\".board\")!;\nconst boardContainer =\n  document.querySelector<HTMLDivElement>(\".board__container\")!;\nconst boardText = document.querySelector<HTMLParagraphElement>(\".board__text\")!;\nconst botContainer = document.querySelector<HTMLDivElement>(\".player_right\")!;\nconst playerIcon = document.querySelector<HTMLDivElement>(\".player__icon\")!;\nconst playerUse = document.querySelector<SVGUseElement>(\n  \".circle-icon__use_left\"\n)!;\nconst playerText =\n  document.querySelector<HTMLParagraphElement>(\".player__text_left\")!;\nconst botCounter =\n  document.querySelector<HTMLParagraphElement>(\".player__counter\")!;\nconst botSvg = document.querySelector<SVGElement>(\".circle-icon__svg_bot\")!;\nconst botUse = document.querySelector<SVGUseElement>(\n  \".circle-icon__use_right\"\n)!;\nconst buttonRestart =\n  document.querySelector<HTMLButtonElement>(\".board__restart\")!;\nconst scoreCounter = document.querySelector<HTMLParagraphElement>('.score__counter')!;\n\nlet playerGesture: Gesture;\nlet botGesture: Gesture;\n\nlet score = 0;\n\nfunction moveIcon(movableElement: HTMLElement, destElement: HTMLElement): void {\n  const offsetX = destElement.offsetLeft - movableElement.offsetLeft;\n  const offsetY = destElement.offsetTop - movableElement.offsetTop;\n  movableElement.style.translate = `${offsetX}px ${offsetY}px`;\n}\n\nfunction changeIcon(gesture: Gesture, useElement: SVGUseElement) {\n  let url: string;\n  switch (gesture) {\n    case \"paper\":\n      url = `${paper}#paper`;\n      break;\n    case \"scissors\":\n      url = `${scissors}#scissors`;\n      break;\n    case \"rock\":\n      url = `${rock}#rock`;\n      break;\n    default:\n      url = \"\";\n      break;\n  }\n  useElement.setAttribute(\"href\", url);\n}\n\nfunction clearIcon(useElement: SVGUseElement) {\n  useElement.setAttribute(\"href\", \"\");\n}\n\nfunction movePlayerIconBack() {\n  playerIcon.classList.add(\"player__icon_animated\");\n  playerIcon.style.translate = \"0\";\n}\n\nfunction showBoardElements() {\n  botContainer.classList.remove(\"player_hidden\");\n  playerText.classList.remove(\"player__text_hidden\");\n}\n\nfunction countdown(ms: number, callback: () => void) {\n  let counter = 3;\n  botCounter.textContent = counter.toString();\n  let timerId = setTimeout(function tick() {\n    counter--;\n    if (counter === 0) {\n      clearInterval(timerId);\n      callback();\n      return;\n    }\n    botCounter.textContent = counter.toString();\n    timerId = setTimeout(tick, ms);\n  }, ms);\n}\n\nfunction updateScore() {\n  score++;\n  scoreCounter.textContent = score.toString();\n}\n\nfunction showMessage(result: number, element: HTMLParagraphElement): void {\n  switch (result) {\n    case 0:\n      element.textContent = \"draw\";\n      break;\n    case 1:\n      element.textContent = \"You win\";\n      updateScore();\n      break;\n    case -1:\n      element.textContent = \"You lose\";\n      break;\n  }\n}\n\nfunction toggleScreens(firstElem: HTMLElement, secondElem: HTMLElement): void {\n  const firstClassName = firstElem.classList[0];\n  const firstHiddenClassName = `${firstClassName}_hidden`;\n  const secondClassName = secondElem.classList[0];\n  const secondHiddenClassName = `${secondClassName}_hidden`;\n\n  if (firstElem.classList.contains(firstHiddenClassName)) {\n    firstElem.classList.remove(firstHiddenClassName);\n    secondElem.classList.add(secondHiddenClassName);\n  } else {\n    firstElem.classList.add(firstHiddenClassName);\n    secondElem.classList.remove(secondHiddenClassName);\n  }\n}\n\nfunction animateButtonOnRestart(button: HTMLButtonElement) {\n  setTimeout(() => {\n    button.classList.add(\"start-screen__button_animated\");\n    button.style.translate = \"0\";\n  }, delayIconAnimation);\n}\n\nfunction restart() {\n  clearIcon(playerUse);\n  clearIcon(botUse);\n  botContainer.classList.add(\"player_hidden\");\n  playerText.classList.add(\"player__text_hidden\");\n  botCounter.classList.remove(\"player__counter_hidden\");\n  botSvg.classList.add(\"circle-icon__svg_hidden\");\n  boardContainer.classList.remove(\"board__container_expanded\");\n  playerIcon.classList.remove(\"player__icon_animated\");\n  botCounter.textContent = '';\n  toggleScreens(startContainer, board);\n  const gestureButton = document.querySelector<HTMLButtonElement>(\n    `.start-screen__button_${playerGesture}`\n  );\n  if (!gestureButton) return;\n  moveIcon(gestureButton, playerIcon);\n  animateButtonOnRestart(gestureButton);\n}\n\nfunction handleBotChoice() {\n  botGesture = getBotGesture(gestureArray);\n  botCounter.classList.add(\"player__counter_hidden\");\n  botSvg.classList.remove(\"circle-icon__svg_hidden\");\n  changeIcon(botGesture, botUse);\n  boardContainer.classList.add(\"board__container_expanded\");\n  const result = compareGestures(playerGesture, botGesture);\n  showMessage(result, boardText);\n}\n\nstartContainer.addEventListener(\"click\", (evt: MouseEvent) => {\n  const target = evt.target;\n  if (\n    !(target instanceof HTMLButtonElement) ||\n    !target.classList.contains(\"circle-icon\")\n  ) {\n    return;\n  }\n\n  // игрок выбирает жест\n  playerGesture = getPlayerGesture(target);\n  toggleScreens(startContainer, board);\n  moveIcon(playerIcon, target);\n  changeIcon(playerGesture, playerUse);\n\n  setTimeout(() => {\n    showBoardElements();\n    movePlayerIconBack();\n  }, delayIconAnimation);\n});\n\nplayerIcon.addEventListener(\"transitionend\", () => {\n  countdown(500, handleBotChoice);\n});\n\nstartContainer.addEventListener(\"transitionend\", (evt) => {\n  const target = evt.target;\n  if (!target || !(target instanceof HTMLButtonElement)) return;\n  target.classList.remove(\"start-screen__button_animated\");\n});\n\nbuttonRestart.addEventListener(\"click\", restart);\n","import { Gesture } from \"./type\";\n\nfunction getPlayerGesture(button: HTMLButtonElement): Gesture {\n  return button.dataset.gesture as Gesture;\n}\n\nfunction getBotGesture(gestureArray: Gesture[]) {\n  const item = gestureArray[Math.floor(Math.random() * gestureArray.length)];\n  return item;\n\n}\n\nfunction compareGestures(playerGesture: Gesture, botGesture: Gesture): number {\n  const gestureObj = {\n    'rock': {weakTo: 'paper', strongTo: 'scissors'},\n    'paper': {weakTo: 'scissors', strongTo: 'rock'},\n    'scissors': {weakTo: 'rock', strongTo: 'paper'}\n  };\n\n\n  if (playerGesture === gestureObj[botGesture].weakTo) {\n    return 1;\n  }\n\n  if (playerGesture === gestureObj[botGesture].strongTo) {\n    return -1;\n  }\n\n  return 0;\n\n}\n\n\nexport {getPlayerGesture, getBotGesture, compareGestures};\n"],"names":["__webpack_require__","gestureArray","startContainer","document","querySelector","board","boardContainer","boardText","botContainer","playerIcon","playerUse","playerText","botCounter","botSvg","botUse","buttonRestart","scoreCounter","playerGesture","botGesture","score","moveIcon","movableElement","destElement","offsetX","offsetLeft","offsetY","offsetTop","style","translate","changeIcon","gesture","useElement","url","setAttribute","clearIcon","toggleScreens","firstElem","secondElem","firstHiddenClassName","classList","secondHiddenClassName","contains","remove","add","handleBotChoice","Math","floor","random","length","getBotGesture","result","gestureObj","weakTo","strongTo","compareGestures","element","textContent","toString","showMessage","addEventListener","evt","target","HTMLButtonElement","dataset","setTimeout","ms","callback","counter","timerId","tick","clearInterval","countdown","gestureButton","button"],"sourceRoot":""}